function [p,p_fdr,sig,greater] = permutationStatsAll(sbj_name,project_name,block_names,dirs,elecs,tag,column,conds,datatype,freq_band,stats_params)

%% INPUTS
%       sbj_name: subject name
%       project_name: name of task
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       elecs: can select subset of electrodes to epoch (default: all)
%       column:         column name of data.trialinfo where conds are
%       conds:          cell containing cond name(s) (1 or 2) to compare
%       freq_band: e.g., 'CAR','HFB','SpecDense'
%       datatype: 'Band' or 'Spec'
%       stats_params:   .task_win:   2-element vector specifying window of time to use in stats (in sec)    
%                       .bl_win:     2-element vector specifying window to use for baseline (in sec)- only relevent when 1 condition
%                       .paired:     true or false: 
%                                    when comparing two conditions, can only do unpaired test (i.e. false)
%                                    when comparing one condition to baseline, can do paired or unpaired test 
%                                    (for paired, will only use baseline periods just prior to trials of interest; 
%                                    for unpaired, will use baseline periods from all trials)    
%                       .nreps:      # of reps for permutation: default = 10000
%                       .noise_method:   'trials' or 'timepts': how to eliminate trials
%                       .freq_range:    2-element vector specifying freq range to use for stats 
%                                       (for spectral data only)
%                       .alpha (significance threshold for p-value, before FDR correction; default = 0.05)
%% OUTPUTS
%       p: p-value for each electrode site
%       p_fdr: p threshold for significance after FDR correction
%       sig: binary vector indicating which electrode sites have
%            significant p-value after FDR correction (i.e. where p < p_fdr)

if isempty(stats_params)
    stats_params = genStatsParams(project_name);
end

%% 
load([dirs.data_root,'/OriginalData/',sbj_name,'/global_',project_name,'_',sbj_name,'_',block_names{1},'.mat'])
if isempty(elecs)
    elecs = setdiff(1:globalVar.nchan,globalVar.refChan);
end

%% loop through electrodes
data_all = concatBlocks(sbj_name,project_name,block_names,dirs,elecs(1),freq_band,datatype,{'wave'},tag);

if strcmp(project_name, 'MMR')
    nstim = 1;
else
    nstim = nanmax(data_all.trialinfo.nstim);
end

if nstim > 1
    ISI = nanmedian(data_all.trialinfo.allonsets(:,2)-data_all.trialinfo.allonsets(:,1));
end

p = nan(globalVar.nchan,nstim);
greater = nan(globalVar.nchan,nstim);
for ei = 1:length(elecs)
    el = elecs(ei);
    data_all = concatBlocks(sbj_name, project_name, block_names,dirs,el,freq_band,datatype,{'wave'},tag);
    for si = 1:nstim
        stats_params_tmp = stats_params;
%         stats_params_tmp.task_win = stats_params_tmp.task_win+ISI*(si-1);
        [p(ei,si),greater(ei,si)]= permutationStats(data_all,column,conds,stats_params_tmp);
    end
    disp(['Performing permutation stats on elec: ',num2str(el)])
end

% [p_fdr,~] = fdr(p,stats_params.alpha);
[p_fdr,~] = fdr(p(:),stats_params.alpha);
sig = p<p_fdr;


