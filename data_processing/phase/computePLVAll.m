function computePLVAll(sbj_name,project_name,block_names,dirs,elecs1,elecs2,pairing,PLVdim,locktype,freq_band,column,conds,plv_params)
%% INPUTS
%       sbj_name: subject name
%       project_name: name of task
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       elecs1, elecs2: pairs of electrodes b/w which to compute PLV  
%                       (can either be vectors of elec #s or cells of elec names)
%       pairing: 'all' (compute PLV between all sites in elecs1 and all
%                       sites in elecs2) or 
%                'one' (compute PLV between corresponding entries in elecs1
%                       and elecs2; elecs1 and elecs2 must be same size)   
%       PLVdim:  dimension along which to compute PLV ('trials' or 'time')
%                'trials': (1 PLV value per freq/trial; i.e. across time)  or
%                'time': (1 PLV value per freq/timept; i.e. across trials)
%       locktype: 'stim' or 'resp' (which event epoched data is locked to)
%       column: column of data.trialinfo by which to sort trials for plotting
%       conds:  cell containing specific conditions to plot within column (default: all of the conditions within column)

%%
nelec1 = length(elecs1);
nelec2 = length(elecs2);

if isempty(plv_params)
    plv_params = genPLVParams(project_name);
end

% load globalVar
load([dirs.data_root,filesep,'OriginalData',filesep,sbj_name,filesep,'global_',project_name,'_',sbj_name,'_',block_names{1},'.mat'])
if iscell(elecs1)
    elecnums1 = ChanNamesToNums(globalVar,elecs1);
    elecnames1 = elecs1;
else
    elecnums1 = elecs1;
    elecnames1 = ChanNumsToNames(globalVar,elecs1);
end
if iscell(elecs2) % if names, convert to numbers
    elecnums2 = ChanNamesToNums(globalVar,elecs2);
    elecnames2 = elecs2;
else
    elecnums2 = elecs2;
    elecnames2 = ChanNumsToNames(globalVar,elecs2);
end

% if pairing all elecs1 to all elecs2, reshape them so one-to-one
if strcmp(pairing,'all')
    elecnums1 = repmat(elecnums1,[nelec2,1]);
    elecnums1 = reshape(elecnums1,[1,nelec1*nelec2]);
    elecnums2 = repmat(elecnums2,[1,nelec1]);
    
    elecnames1 = repmat(elecnames1,[nelec2,1]);
    elecnames1 = reshape(elecnames1,[1,nelec1*nelec2]);
    elecnames2 = repmat(elecnames2,[1,nelec1]);
end

tag = [locktype,'lock'];
if plv_params.blc
    tag = [tag,'_bl_corr'];
end
concatfield = {'phase'}; % concatenate phase across blocks

% if have previously run PLV on other pairs of elecrodes, load and append to
% file (rather than overwriting)
dir_out = [dirs.result_root,filesep,project_name,filesep,sbj_name,filesep,'allblocks',filesep];   
fn = [dir_out,project_name,'_PLV_',freq_band,'.mat'];
if exist(fn,'file')
    load(fn,'PLV')
end

if ~exist(dir_out,'dir')
    mkdir(dir_out)
end

for ei = 1
    data_tmp = concatBlocks(sbj_name,block_names,dirs,elecnums1(ei),freq_band,'Spec',concatfield,tag);
    if isempty(conds)
        tmp = find(~cellfun(@isempty,(data_tmp.trialinfo.(column))));
        conds = unique(data_tmp.trialinfo.(column)(tmp));
    end
    [grouped_trials_all,grouped_condnames] = groupConds(conds,data_tmp.trialinfo,column,plv_params.noise_method,plv_params.noise_fields_trials,false);
end

for gi = 1:length(grouped_trials_all)
    numtrials_tot.(grouped_condnames{gi})=length(grouped_trials_all);
end

for ei = 1:length(elecnums1)
    el1 = elecnums1(ei);
    el2 = elecnums2(ei);
    if el1 ~= el2
        % concatenate across blocks
        data_all1 = concatBlocks(sbj_name,block_names,dirs,el1,freq_band,'Spec',concatfield,tag);
        data_all2 = concatBlocks(sbj_name,block_names,dirs,el2,freq_band,'Spec',concatfield,tag);
        [grouped_trials_all1,~] = groupConds(conds,data_all1.trialinfo,column,plv_params.noise_method,plv_params.noise_fields_trials,false);
        [grouped_trials_all2,~] = groupConds(conds,data_all2.trialinfo,column,plv_params.noise_method,plv_params.noise_fields_trials,false);
        if strcmp(PLVdim,'time') % separate by condition
            data_tmp1 = data_all1;
            data_tmp2 = data_all2;
            for ci = 1:length(grouped_trials_all)
                grouped_trials_tmp = intersect(grouped_trials_all1{ci},grouped_trials_all2{ci});
                data_tmp1.phase = data_all1.phase(:,grouped_trials_tmp,:);
                data_tmp2.phase = data_all2.phase(:,grouped_trials_tmp,:);
                PLV_tmp = computePLV(data_tmp1,data_tmp2,PLVdim,plv_params);
                PLV.by_time.(grouped_condnames{ci}).([elecnames1{ei},'_',elecnames2{ei}])= PLV_tmp.vals;
                PLV.numtrials.(grouped_condnames{ci}).([elecnames1{ei},'_',elecnames2{ei}])=length(grouped_trials_tmp);
            end
        else
            PLV_tmp = computePLV(data_all1,data_all2,PLVdim,plv_params);
            PLV.by_trial.([elecnames1{ei},'_',elecnames2{ei}])= PLV_tmp.vals;
        end
        disp(['Computed PLV between ',elecnames1{ei},' and ',elecnames2{ei}])
    end
    
    PLV.freqs = PLV_tmp.freqs;
end

if strcmp(PLVdim,'trials')
    PLV.trialinfo = data_all1.trialinfo;
else
    PLV.time = data_all1.time;
end

save(fn,'PLV')

end


