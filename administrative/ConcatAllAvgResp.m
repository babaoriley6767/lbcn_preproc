function data_concat = ConcatAllAvgResp(sbj_name,project_name,block_names,dirs,elecs,datatype,freq_band,locktype,column,conds,concat_params)
% concatenates avg response (either timecourse for BandData or ERSP for
% SpecData) across electrodes (e.g. to be used for multivariate analyses)

%% INPUTS
%       sbj_name: subject name
%       project_name: name of task
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       elecs: can select subset of electrodes to epoch (default: all)
%              (if specifying elecs, can either be vectors of elec #s or cells of elec names)
%       datatype: 'Band',or 'Spec'
%       locktype: 'stim' or 'resp' (which event epoched data is locked to)
%       column: column of data.trialinfo by which to sort trials for plotting
%       conds:  cell containing specific conditions to plot within column (default: all of the conditions within column)
%               can group multiple conds together by having a cell of cells
%               (e.g. conds = {{'math'},{'autobio','self-internal'}})            
%       col:    colors to use for plotting each condition (otherwise will
%               generate randomly)
%       plot_params:    controls plot features (see genPlotParams.m script)


if isempty(concat_params)
    concat_params = genConcatParams();
end

% keep track of bad chans (from any block) for labeling plots
bad_chans = [];
for bi = 1:length(block_names)
    load([dirs.data_root,filesep,'OriginalData',filesep,sbj_name,filesep,'global_',project_name,'_',sbj_name,'_',block_names{bi},'.mat'])
    bad_chans = union(bad_chans,globalVar.badChan);
    nchan = globalVar.nchan;
    data_concat.channame = globalVar.channame;
end
data_concat.badchan = false(1,nchan);
data_concat.badchan(bad_chans)=true;

if iscell(elecs)
    elecs = ChanNamesToNums(globalVar,elecs);
end

if isempty(elecs)
    elecs = setdiff(1:globalVar.nchan,globalVar.refChan);
end

dir_out = [dirs.result_root,filesep,project_name,filesep,sbj_name,filesep,'allblocks'];

%% loop through electrodes and plot


tag = [locktype,'lock'];
if concat_params.blc
    tag = [tag,'_bl_corr'];
end
concatfield = {'wave'}; % concatenate amplitude across blocks

% determine folder name for plots by compared conditions
for ei = 1
    el = elecs(ei);
    data_all = concatBlocks(sbj_name,block_names,dirs,el,freq_band,datatype,concatfield,tag);    
    if isempty(conds)
        tmp = find(~cellfun(@isempty,(data_all.trialinfo.(column))));
        conds = unique(data_all.trialinfo.(column)(tmp));
    end
    nconds = length(conds);
    groupall = false;
    cond_names = groupCondNames(conds,groupall);
    data_concat.time = data_all.time;
    ntime = length(data_all.time);
    if strcmp(datatype,'Band')
        blank = nan(nchan,ntime);
    else %spec
        nfreqs = length(data_all.freqs);
        data_concat.freqs = data_all.freqs;
        blank = nan(nchan,nfreqs,ntime);
    end
    for ci = 1:nconds
        data_concat.wave.(cond_names{ci})= blank;
    end
end

if ~exist(dir_out)
    mkdir(dir_out)
end

for ei = 1:length(elecs)
    el = elecs(ei);
    data_all = concatBlocks(sbj_name,block_names,dirs,el,freq_band,datatype,concatfield,tag);
    if strcmp(concat_params.noise_method,'timepts')
        data_all = removeBadTimepts(data_all,concat_params.noise_fields_timepts);
    end
    [grouped_trials,cond_names] = groupConds(conds,data_all.trialinfo,column,concat_params.noise_method,concat_params.noise_fields_trials,groupall);
    
%     tmp_data = cell(1,ncategs); % with noisy epochs excluded
    for ci = 1:nconds
        data_concat.wave.(cond_names{ci})(el,:)=nanmean(data_all.wave(grouped_trials{ci},:));
    end
    disp(['concatenated electrode ',num2str(el)])
end
